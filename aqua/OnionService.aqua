import "@fluencelabs/aqua-lib/builtin.aqua"

data WrapperParticle:
    cipher: string
    x: string
    y: string
    status: bool
    peer_id: PeerId

data OnionPeer:
    peer_id: PeerId
    x: string
    y: string

service Registry("registry"):
    register(peer_id: PeerId, x: string, y: string) -> bool
    get_users() -> []OnionPeer

service Onion("onion"):
    relay(w_p: WrapperParticle) -> bool
    bench() -> bool

func registerPeer(peer_id: PeerId, x: string, y: string) -> bool:
    on peer_id:
        res <- Registry.register(%init_peer_id%, x, y)
    <- res

func relay(peer_id: PeerId, w_p: WrapperParticle) -> bool:
    on peer_id:
        res <- Onion.relay(w_p)
    <- res

func getOnionPeers(peer_id: PeerId) -> []OnionPeer:
    on peer_id:
        res <- Registry.get_users()
    <- res

func getRelayTime(relay_id: PeerId) -> u64:
    on relay_id:
        res <- Peer.timestamp_ms()
    <- res

func getRelayTimes(relay_ids: []PeerId) -> []u64:
    static: *u64
    for relay_id <- relay_ids:
        on relay_id:
            static <<- Peer.timestamp_ms()
    <- static

func benchTest(peer_id: PeerId) -> bool:
    on peer_id:
        res <- Onion.bench()
    <- res

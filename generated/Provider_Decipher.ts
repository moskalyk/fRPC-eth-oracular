/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.8.0-367
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface NoOpDef {
    u64toi64: (var: number, callParams: CallParams$$<'var'>) => number | Promise<number>;
}
export function registerNoOp(service: NoOpDef): void;
export function registerNoOp(serviceId: string, service: NoOpDef): void;
export function registerNoOp(peer: FluencePeer, service: NoOpDef): void;
export function registerNoOp(peer: FluencePeer, serviceId: string, service: NoOpDef): void;
       

export function registerNoOp(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "NoOp",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "u64toi64" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "var" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface EthRPCDef {
    call_rpc: (uri: string, method: string, params: { signer: string; }, peer_id: string, liveliness: number, callParams: CallParams$$<'uri' | 'method' | 'params' | 'peer_id' | 'liveliness'>) => boolean | Promise<boolean>;
}
export function registerEthRPC(service: EthRPCDef): void;
export function registerEthRPC(serviceId: string, service: EthRPCDef): void;
export function registerEthRPC(peer: FluencePeer, service: EthRPCDef): void;
export function registerEthRPC(peer: FluencePeer, serviceId: string, service: EthRPCDef): void;
       

export function registerEthRPC(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "EtherRPC",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "call_rpc" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "uri" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "method" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "params" : {
                            "tag" : "struct",
                            "name" : "JSONRPCArgs",
                            "fields" : {
                                "signer" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "liveliness" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface CounterDef {
    count: (callParams: CallParams$$<null>) => number | Promise<number>;
}
export function registerCounter(service: CounterDef): void;
export function registerCounter(serviceId: string, service: CounterDef): void;
export function registerCounter(peer: FluencePeer, service: CounterDef): void;
export function registerCounter(peer: FluencePeer, serviceId: string, service: CounterDef): void;
       

export function registerCounter(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "counter",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "count" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface RouterDef {
    get_peers: (callParams: CallParams$$<null>) => string[] | Promise<string[]>;
    register: (peer_id: string, callParams: CallParams$$<'peer_id'>) => boolean | Promise<boolean>;
}
export function registerRouter(service: RouterDef): void;
export function registerRouter(serviceId: string, service: RouterDef): void;
export function registerRouter(peer: FluencePeer, service: RouterDef): void;
export function registerRouter(peer: FluencePeer, serviceId: string, service: RouterDef): void;
       

export function registerRouter(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "Router",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "get_peers" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            },
            "register" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function register(
    peer_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function register(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function register(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("Router" "register") [%init_peer_id%] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "register",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CallArgParams = { signer: string; } 

export function call(
    relay_peer_id: string,
    hub_peer_id: string,
    provider_uris: string[],
    meowthedRPC: string,
    params: CallArgParams,
    config?: {ttl?: number}
): Promise<boolean>;

export function call(
    peer: FluencePeer,
    relay_peer_id: string,
    hub_peer_id: string,
    provider_uris: string[],
    meowthedRPC: string,
    params: CallArgParams,
    config?: {ttl?: number}
): Promise<boolean>;

export function call(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                               (call %init_peer_id% ("getDataSrv" "relay_peer_id") [] relay_peer_id)
                              )
                              (call %init_peer_id% ("getDataSrv" "hub_peer_id") [] hub_peer_id)
                             )
                             (call %init_peer_id% ("getDataSrv" "provider_uris") [] provider_uris)
                            )
                            (call %init_peer_id% ("getDataSrv" "meowthedRPC") [] meowthedRPC)
                           )
                           (call %init_peer_id% ("getDataSrv" "params") [] params)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call hub_peer_id ("Router" "get_peers") [] peers)
                           (call hub_peer_id ("counter" "count") [] count)
                          )
                          (seq
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (xor
                         (seq
                          (call relay_peer_id ("peer" "timestamp_ms") [] ttl)
                          (call relay_peer_id ("NoOp" "u64toi64") [ttl] provider_space_index)
                         )
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                       )
                       (xor
                        (seq
                         (seq
                          (call peers.$.[count]! ("peer" "timestamp_ms") [] liveliness)
                          (call peers.$.[count]! ("EtherRPC" "call_rpc") [provider_uris.$.[provider_space_index]! meowthedRPC params peers.$.[count]! liveliness] res)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "call",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "hub_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "provider_uris" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "meowthedRPC" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "params" : {
                    "tag" : "struct",
                    "name" : "JSONRPCArgs",
                    "fields" : {
                        "signer" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

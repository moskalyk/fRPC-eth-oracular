/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.8.0-367
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface OnionDef {
    bench: (callParams: CallParams$$<null>) => boolean | Promise<boolean>;
    relay: (w_p: { cipher: string; peer_id: string; status: boolean; x: string; y: string; }, callParams: CallParams$$<'w_p'>) => boolean | Promise<boolean>;
}
export function registerOnion(service: OnionDef): void;
export function registerOnion(serviceId: string, service: OnionDef): void;
export function registerOnion(peer: FluencePeer, service: OnionDef): void;
export function registerOnion(peer: FluencePeer, serviceId: string, service: OnionDef): void;
       

export function registerOnion(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "onion",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "bench" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            },
            "relay" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "w_p" : {
                            "tag" : "struct",
                            "name" : "WrapperParticle",
                            "fields" : {
                                "x" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "y" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "cipher" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "peer_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "status" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface RegistryDef {
    get_users: (callParams: CallParams$$<null>) => { peer_id: string; x: string; y: string; }[] | Promise<{ peer_id: string; x: string; y: string; }[]>;
    register: (peer_id: string, x: string, y: string, callParams: CallParams$$<'peer_id' | 'x' | 'y'>) => boolean | Promise<boolean>;
}
export function registerRegistry(service: RegistryDef): void;
export function registerRegistry(serviceId: string, service: RegistryDef): void;
export function registerRegistry(peer: FluencePeer, service: RegistryDef): void;
export function registerRegistry(peer: FluencePeer, serviceId: string, service: RegistryDef): void;
       

export function registerRegistry(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "registry",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "get_users" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "OnionPeer",
                                "fields" : {
                                    "peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "x" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "y" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "register" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "x" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "y" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export type RelayArgW_p = { cipher: string; peer_id: string; status: boolean; x: string; y: string; } 

export function relay(
    peer_id: string,
    w_p: RelayArgW_p,
    config?: {ttl?: number}
): Promise<boolean>;

export function relay(
    peer: FluencePeer,
    peer_id: string,
    w_p: RelayArgW_p,
    config?: {ttl?: number}
): Promise<boolean>;

export function relay(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "w_p") [] w_p)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("onion" "relay") [w_p] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "relay",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "w_p" : {
                    "tag" : "struct",
                    "name" : "WrapperParticle",
                    "fields" : {
                        "x" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "y" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "cipher" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "status" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function benchTest(
    peer_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function benchTest(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function benchTest(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("onion" "bench") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "benchTest",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getRelayTime(
    relay_id: string,
    config?: {ttl?: number}
): Promise<number>;

export function getRelayTime(
    peer: FluencePeer,
    relay_id: string,
    config?: {ttl?: number}
): Promise<number>;

export function getRelayTime(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call relay_id ("peer" "timestamp_ms") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getRelayTime",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getOnionPeers(
    peer_id: string,
    config?: {ttl?: number}
): Promise<{ peer_id: string; x: string; y: string; }[]>;

export function getOnionPeers(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<{ peer_id: string; x: string; y: string; }[]>;

export function getOnionPeers(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("registry" "get_users") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getOnionPeers",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "OnionPeer",
                        "fields" : {
                            "peer_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "x" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "y" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function registerPeer(
    peer_id: string,
    x: string,
    y: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function registerPeer(
    peer: FluencePeer,
    peer_id: string,
    x: string,
    y: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function registerPeer(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "x") [] x)
                         )
                         (call %init_peer_id% ("getDataSrv" "y") [] y)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("registry" "register") [%init_peer_id% x y] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "registerPeer",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "x" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "y" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
